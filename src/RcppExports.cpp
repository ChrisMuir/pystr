// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pystr_capitalize_
CharacterVector pystr_capitalize_(CharacterVector strs);
RcppExport SEXP _pystr_pystr_capitalize_(SEXP strsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_capitalize_(strs));
    return rcpp_result_gen;
END_RCPP
}
// pystr_center_
CharacterVector pystr_center_(CharacterVector strs, int width, char fillchar);
RcppExport SEXP _pystr_pystr_center_(SEXP strsSEXP, SEXP widthSEXP, SEXP fillcharSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< char >::type fillchar(fillcharSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_center_(strs, width, fillchar));
    return rcpp_result_gen;
END_RCPP
}
// pystr_count_
IntegerVector pystr_count_(CharacterVector strs, std::string sub, int start, int end);
RcppExport SEXP _pystr_pystr_count_(SEXP strsSEXP, SEXP subSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< std::string >::type sub(subSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_count_(strs, sub, start, end));
    return rcpp_result_gen;
END_RCPP
}
// pystr_endswith_
LogicalVector pystr_endswith_(CharacterVector inputs, CharacterVector suffixes, NumericVector start, NumericVector end);
RcppExport SEXP _pystr_pystr_endswith_(SEXP inputsSEXP, SEXP suffixesSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type suffixes(suffixesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_endswith_(inputs, suffixes, start, end));
    return rcpp_result_gen;
END_RCPP
}
// pystr_in_
bool pystr_in_(SEXP& x, SEXP& table);
RcppExport SEXP _pystr_pystr_in_(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP& >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_in_(x, table));
    return rcpp_result_gen;
END_RCPP
}
// pystr_isalnum_
LogicalVector pystr_isalnum_(CharacterVector strs);
RcppExport SEXP _pystr_pystr_isalnum_(SEXP strsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_isalnum_(strs));
    return rcpp_result_gen;
END_RCPP
}
// pystr_isalpha_
LogicalVector pystr_isalpha_(CharacterVector strs);
RcppExport SEXP _pystr_pystr_isalpha_(SEXP strsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_isalpha_(strs));
    return rcpp_result_gen;
END_RCPP
}
// pystr_islower_
LogicalVector pystr_islower_(CharacterVector strs);
RcppExport SEXP _pystr_pystr_islower_(SEXP strsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_islower_(strs));
    return rcpp_result_gen;
END_RCPP
}
// pystr_isnumeric_
LogicalVector pystr_isnumeric_(CharacterVector strs);
RcppExport SEXP _pystr_pystr_isnumeric_(SEXP strsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_isnumeric_(strs));
    return rcpp_result_gen;
END_RCPP
}
// pystr_isupper_
LogicalVector pystr_isupper_(CharacterVector strs);
RcppExport SEXP _pystr_pystr_isupper_(SEXP strsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_isupper_(strs));
    return rcpp_result_gen;
END_RCPP
}
// pystr_lstrip_
CharacterVector pystr_lstrip_(CharacterVector strs, std::string chars);
RcppExport SEXP _pystr_pystr_lstrip_(SEXP strsSEXP, SEXP charsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< std::string >::type chars(charsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_lstrip_(strs, chars));
    return rcpp_result_gen;
END_RCPP
}
// pystr_rstrip_
CharacterVector pystr_rstrip_(CharacterVector strs, std::string chars);
RcppExport SEXP _pystr_pystr_rstrip_(SEXP strsSEXP, SEXP charsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< std::string >::type chars(charsSEXP);
    rcpp_result_gen = Rcpp::wrap(pystr_rstrip_(strs, chars));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pystr_pystr_capitalize_", (DL_FUNC) &_pystr_pystr_capitalize_, 1},
    {"_pystr_pystr_center_", (DL_FUNC) &_pystr_pystr_center_, 3},
    {"_pystr_pystr_count_", (DL_FUNC) &_pystr_pystr_count_, 4},
    {"_pystr_pystr_endswith_", (DL_FUNC) &_pystr_pystr_endswith_, 4},
    {"_pystr_pystr_in_", (DL_FUNC) &_pystr_pystr_in_, 2},
    {"_pystr_pystr_isalnum_", (DL_FUNC) &_pystr_pystr_isalnum_, 1},
    {"_pystr_pystr_isalpha_", (DL_FUNC) &_pystr_pystr_isalpha_, 1},
    {"_pystr_pystr_islower_", (DL_FUNC) &_pystr_pystr_islower_, 1},
    {"_pystr_pystr_isnumeric_", (DL_FUNC) &_pystr_pystr_isnumeric_, 1},
    {"_pystr_pystr_isupper_", (DL_FUNC) &_pystr_pystr_isupper_, 1},
    {"_pystr_pystr_lstrip_", (DL_FUNC) &_pystr_pystr_lstrip_, 2},
    {"_pystr_pystr_rstrip_", (DL_FUNC) &_pystr_pystr_rstrip_, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_pystr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
